1. Are you a smart contract practitioner?,2.  What is your main role as a smart contract practitioner?,3. How many years of experience do you have in Solidity smart contract development/Testing/project management/research/others?,4. What country do you currently reside in?,"5. Which of the following Ethereum crypto APIs have you used? (Multiple Choice). In this survey, ""Ethereum crypto APIs"" refers to the crypto-related opcodes/precompiled contracts supported by Ethereum.",6. Which of the following cryptographic primitives in smart contracts are you familiar with?,7. Do you believe that accomplishing cryptographic tasks (such as signature verification) is more challenging than other common programming tasks in smart contracts?,"8.  Why do you think implementing cryptographic tasks is more challenging, or different from other common tasks in smart contracts?",9. Have you encountered the following obstacles while accomplishing cryptographic tasks?,10. How do you obtain required knowledge for cryptographic tasks in smart contracts? (Multiple Choice),"11. For cryptographic tasks that have available templates (for example, Signature have been implemented in  OpenZeppelin ECDSA and many other templates), do you prefer to use existing templates or implement them from scratch?","12. Are there any cryptographic tasks that you want to accomplish but currently lack available templates? If yes, please list them below. Otherwise, please skip this question.","13. Do you think current Ethereum crypto APIs are good enough to support all your cryptographic tasks, in terms of functionality and usability? Please rate them on a scale of 1-5. (1) Functionality of the APIs cover all functionalities I needed? (2) Usability: Are the APIs easy to understand & use, with easily accessable documentation? [Functionality]","13. Do you think current Ethereum crypto APIs are good enough to support all your cryptographic tasks, in terms of functionality and usability? Please rate them on a scale of 1-5. (1) Functionality of the APIs cover all functionalities I needed? (2) Usability: Are the APIs easy to understand & use, with easily accessable documentation? [Usability]","14.  Are there any cryptographic tasks that you wish to accomplish, but are currently unsupported by Ethereum's crypto APIs?  If yes, please list them below. Otherwise, please skip this question.",15. Do you think ensuring the security of cryptographic implementations is more challenging than securing other parts of a smart contract?,"16.  Why do you think securing cryptographic Implementations is more challenging, or different from other common programming tasks?",17. Which of the following crypto-related vulnerabilities in the Smart Contract Weakness Classification (SWC) list are you familiar with? (Multiple Choice),18. Do you think the following types of tools / resources are good enough to support secure and efficient implementations of cryptographic tasks?  Please rate them on a scale of 1 to 5.  [Solidity and Ethereum documentation],"18. Do you think the following types of tools / resources are good enough to support secure and efficient implementations of cryptographic tasks?  Please rate them on a scale of 1 to 5.  [Audited templates, e.g., Openzepplin's templates]",18. Do you think the following types of tools / resources are good enough to support secure and efficient implementations of cryptographic tasks?  Please rate them on a scale of 1 to 5.  [Testing tools],18. Do you think the following types of tools / resources are good enough to support secure and efficient implementations of cryptographic tasks?  Please rate them on a scale of 1 to 5.  [Security audit tools],"19. In addition to the four types of tools/resources mentioned in the previous question, are there any other types of support you desire? If yes, please list them below. Otherwise, please skip this question."
Yes,Research,7,Romania,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),"Gas constraints, high risk in case of failure, limited number of available libraries","Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,,(Good),(Very bad),,Yes (Go to Question 16),The knowledge required to implement cryptographic primitives is more niche and requires more research.,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Very Good),(Neutrality),(Neutrality),
Yes,Development,2.5,Hungary,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),"For some reason it takes more time for me to implement them, and it's not always trivial to handle them from an off-chain app either","Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow",I usually use existing templates,,(Good),(Bad),,"They are basically the same, but lie in different aspects (Go to Question 16)",They require different knowledge that is harder to understand,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Very Good),(Good),(Good),"tutorials, blogposts in simple language"
Yes,Development,1,USA,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow","I usually use existing templates;It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",Zero-knowledge Proofs,(Neutrality),(Very Good),,"They are basically the same, but lie in different aspects (Go to Question 16)",Cryptography gets to the heart of the problem itself.,None of them,(Very Good),(Neutrality),(Neutrality),(Neutrality),
Yes,Project management,1,Pakistan,KECCAK256 / SHA3 (https://www.evm.codes/#20),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Documentations of the template provider, e.g., OpenZeppllin;Q&A sites, such as Stack Overflow","I usually use existing templates;It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",,(Good),(Neutrality),,Yes (Go to Question 16),,,(Neutrality),(Good),(Neutrality),(Neutrality),
Yes,Development,2,Singapore,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;evm.codes",I usually implement cryptographic tasks from scratch.,,(Good),(Good),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Good),(Good),(Good),
Yes,Development,2,France,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",More sensitive. It requires a good understanding of the mathematic to be comfortable with the implementation,"Security obstacle. For example, I am uncertain whether my implementation is secure.",Technical books / papers,I usually use existing templates,,(Good),(Bad),,Yes (Go to Question 16),More sensitive. It requires a good understanding of the mathematic to be comfortable with the implementation,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Good),(Good),(Neutrality),
Yes,Development,2,Canada,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02);BLAKE2 (https://www.evm.codes/precompiled#0x09),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs","It depends on the complexity of the cryptographic task. For simple tasks, I use existing templates",,(Good),(Good),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Good),(Bad),(Bad),
Yes,Development,5,Japan,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),Need to understand how to use the cryptographic protocol,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers","I usually use existing templates;It depends on the complexity of the cryptographic task. For simple tasks, I use existing templates",,(Good),(Good),"Signature aggregation. For example, if I want to batch meta transactions, my smart contract will have to verify each signature corresponding to the transaction. It would be nice if there is a cryptographic protocol that can verify all signatures in one step",Yes (Go to Question 16),Need knowledge of cryptography,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Good),(Good),(Good),Online education
Yes,Development,3,Turkey,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",,,(Neutrality),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)",,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Very Good),(Neutrality),(Neutrality),
Yes,Development,5,Brazil,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),,,"Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Online tutorials/blogs",I usually use existing templates,,(Very Good),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)",,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Bad),(Bad),(Good),(Good),
Yes,Development,5,Portugal,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),"Difficult to debug and ensure security, opaque nature of algorithms, if implementing algorithms then very difficult to reason about","Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,,(Good),(Good),"Obvious one with other curves, pairings",Yes (Go to Question 16),"Impossible to verify, almost always probabilistic, no way to Testing",SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Good),(Bad),(Bad),"Expert auditing, fuzzing"
Yes,Development,2,Thailand,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),Cryptographic tasks are more challenging to implement in smart contracts due to their complexity and security implications,"Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Q&A sites, such as Stack Overflow","It depends on the complexity of the cryptographic task. For simple tasks, I use existing templates",,(Good),(Neutrality),,No (Go to Question 17),,SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121),(Neutrality),(Very Good),(Good),(Bad),
Yes,Development,2,USA,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),It's easier to make critical mistakes,"Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Technical books / papers",I usually use existing templates,ZK Primitives,(Very Good),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)",Issues won't be revealed by Testing,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121),(Good),(Very Good),(Neutrality),(Bad),
Yes,Development,2,Ukraine,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),"Development of Smart Contracts usually involves high-level languages such as Solidity or Vyper. Implementing cryptographic tasks requires a different stack of knowledge, such as understanding of calculus, bitwise operations and research.",,"Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,,(Good),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)","Easy to get in a pitfall with bytes/bits around you, low-level programming and math knowledge is needed.",None of them,(Good),(Neutrality),(Good),(Good),Foundry Telegram Support Chat
Yes,Development,2,France,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),ECDSA is a pain to make it work,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Online tutorials/blogs","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Development,1,Egypt,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);ModExp (https://www.evm.codes/precompiled#0x05);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)","believe that signature verification and authorization is the most challenging and security important task in a SCW for example, but that depends on heavily on what is your contract doing","Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin",I usually use existing templates,"ZK Proofs, BLS Signatures (not complete libraries)",(Good),(Bad),,,,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Good),(Neutrality),(Bad),
Yes,Development,1,Egypt,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers","It depends on the complexity of the cryptographic task. For simple tasks, I use existing templates",,(Good),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)",because it requires a different skillset,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Security/Auditor,1,Pakistan,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),Not having good understanding of Cryptography,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,N/A,(Neutrality),(Neutrality),,Yes (Go to Question 16),Signature Malleability,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Neutrality),(Neutrality),(Neutrality),
Yes,Development,4,Canada,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),"This is because cryptography requires a strong understanding of advanced mathematical concepts such as public key cryptography, Signatures, and hash functions. Additionally, implementing these cryptographic tasks in a secure manner often requires careful consideration of potential attack vectors and vulnerabilities.","Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Documentations of the template provider, e.g., OpenZeppllin;Q&A sites, such as Stack Overflow",I usually implement cryptographic tasks from scratch.,,(Good),(Good),,No (Go to Question 17),,SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Good),(Neutrality),(Good),(Good),
Yes,Development,3,USA,KECCAK256 / SHA3 (https://www.evm.codes/#20),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),would say it鈥檚 not intuitive. I use solidity and the syntax and steps required to do signature verification are long.,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,"None in the mind at the moment, but templates would be great!",(Neutrality),(Neutrality),,Yes (Go to Question 16),"Again, harder syntax and complex processes",SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Bad),(Neutrality),(Neutrality),(Bad),
Yes,Development,1,Italy,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs",I usually use existing templates,,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Good),(Neutrality),(Bad),
Yes,Technical Writing,2,Czech Republic,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),"In my opinion, typically you can get off only with strong EVM knowledge and understanding of logic. Implementing cryptographic tasks requires both plus strong math.","Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,,(Good),(Good),,Yes (Go to Question 16),Same answer as Q8.,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120),(Bad),(Good),(Neutrality),(Neutrality),
Yes,Research,1,China,ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),cryptographic tasks require developers understand cryptography behind each cryptographic api,,"Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers","It depends on the complexity of the cryptographic task. For simple tasks, I use existing templates",,(Neutrality),(Good),,Yes (Go to Question 16),Only understand cryptography can secure implementations while cryptography not easy to learn,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Bad),(Bad),(Bad),(Bad),
Yes,Development,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),1. Solidity lacks of native cryptographic libraries. 2. Gas costs are important. 3. Vulnerability may cause lot of lose.,"Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,,(Bad),(Good),"Different elliptic curves, such as bls, pasta curves.","They are basically the same, but lie in different aspects (Go to Question 16)",1. Preventing side-channel attacks is non-trivial 2. Adversarial nature of permissionless blockchain,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Bad),(Good),(Neutrality),(Neutrality),
Yes,Development,3,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),The cryptographic algorithms are hard to understand and are hard implement correctly.,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow",I usually use existing templates,,(Bad),(Neutrality),"EC schnorr, BLS signature",Yes (Go to Question 16),Because its security is hard to check.,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117),(Neutrality),(Neutrality),(Bad),(Bad),
Yes,Development,4,USA,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);ModExp (https://www.evm.codes/precompiled#0x05);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),Signature verification (and other tasks) often require inline assembly to interact with pre-compiles,"Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Q&A sites, such as Stack Overflow;template provider source code/other project source code","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates;",HALO2/PLONK proof verification,(Good),(Good),BLS12381 curve operations,Yes (Go to Question 16),It often requires auditing external sources such as ZK circuits. For non-ZK tasks it requires thought about the hardness assumptions of the primitives.,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Very Good),(Very Good),(Neutrality),
Yes,Development,1,Nigeria,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,"Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs",I usually use existing templates,No,(Very Good),(Very Good),No,"They are basically the same, but lie in different aspects (Go to Question 16)","Well, because signatures help validate transactions, and not securing them leads to a malicious replay.",SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Very Good),(Very Good),(Neutrality),(Neutrality),
Yes,Research,2,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03);ModExp (https://www.evm.codes/precompiled#0x05);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),have more experience in common programming tasks than cryptographic task and the crypto interfaces are not adequate in solidity.,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs",I usually use existing templates,No,(Bad),(Neutrality),want to implement BBS04 group signature on-chain but pre-compiled contracts do not provide corresponding interfaces,"They are basically the same, but lie in different aspects (Go to Question 16)",Cryptographic implementations requires more cryptographic expertise,SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Bad),(Neutrality),(Neutrality),(Neutrality),"Domain specific language tools, e.g., Circom and Zokrates"
Yes,Development,2,Nigeria,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",Because it requires enough theoretical understanding of the workaround and its meanings to be able to properly implement the tasks associated with cryptography,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs",I usually use existing templates,,(Good),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)","They are both important in terms of security, any mistake in the cryptographic or smart contract implementations will not crash the system is only a matter of time",SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Very Good),(Very Good),(Very Good),(Very Good),Proper documentation on web3 technology useage
Yes,Research,3.5,France,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),it can be hard to debug,"Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Technical books / papers",I usually use existing templates,recursive zkp DSL,(Neutrality),(Very Good),BLS12-381 signatures verification are still missing,Yes (Go to Question 16),it requires knowledge that we may not have,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Bad),(Good),(Good),(Very Good),
Yes,Development,5,Canada,None of them.,"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),,"Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.",Online tutorials/blogs;Technical books / papers,I usually implement cryptographic tasks from scratch.,,(Very Good),(Very Good),,Yes (Go to Question 16),,,(Very Good),(Very Good),(Very Good),(Very Good),
Yes,Development,2.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03);ModExp (https://www.evm.codes/precompiled#0x05);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",Implementing cryptographic tasks requires at least an understanding of the relevant terminology and sometimes even some mathematical foundation,"Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Technical books / papers",I usually use existing templates,,(Good),(Good),GmSSL,No (Go to Question 17),"Since the security of all these cryptographic algorithms has been proven by researches, it is only necessary for you to use them correctly.",None of them,(Good),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,3,Singapore,ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),Related documents are very pool.,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Online tutorials/blogs",I usually use existing templates,Grab data from ETH.,(Very bad),(Very bad),No,Yes (Go to Question 16),Testing methods are limited,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117),(Very bad),(Very bad),(Very bad),(Very bad),No
Yes,Research,3,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,,"Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow",I usually use existing templates,,(Good),(Neutrality),,Yes (Go to Question 16),It's more complex.,None of them,(Neutrality),(Good),(Bad),(Bad),
Yes,Development,6,Netherlands,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);RIPEMD160 (https://www.evm.codes/precompiled#0x03),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,None of them.,"Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Q&A sites, such as Stack Overflow""","I usually use existing templates;It depends on the complexity of the cryptographic task. For simple tasks, I use existing templates",Verkle Trees,(Neutrality),(Very Good),BLS/Schnorr signatures verification,"They are basically the same, but lie in different aspects (Go to Question 16)","Need to understand limitations, for example signature used for invalidation could be malleable",SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Good),(Good),(Good),
Yes,Development,2,Australia,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow;Technical books / papers",I usually use existing templates,,(Neutrality),(Neutrality),,"They are basically the same, but lie in different aspects (Go to Question 16)",,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Good),(Neutrality),(Neutrality),
Yes,Development,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02);ECADD (https://www.evm.codes/precompiled#0x06);ECMUL (https://www.evm.codes/precompiled#0x07);ECPairing (https://www.evm.codes/precompiled#0x08),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge proof (including Plonk, etc.)",No (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs;Q&A sites, such as Stack Overflow",I usually use existing templates,,(Neutrality),(Very Good),"for pairing friendly curves, ethereum only has the BN254 precompile. So when developing zkps we often need to resort to field emulations if the circuit is about check a bigger curve",No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121),(Very Good),(Very Good),(Neutrality),(Neutrality),
Yes,Development,5,USA,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.);Zero-knowledge proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",,,"Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Technical books / papers",I usually use existing templates,,(Neutrality),(Neutrality),,Yes (Go to Question 16),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Good),(Good),(Very Good),(Good),"Simulators, i.e. Tenderly"
Yes,Research,6,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),Cryptographic functions provided in Solidity are quite complex to use,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.;Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documentations, such as Solidity documentations, Ethereum Yellow Paper;Documentations of the template provider, e.g., OpenZeppllin;Online tutorials/blogs","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",,(Bad),(Bad),,Yes (Go to Question 16), No smart contract security analyzer supports the detection of cryptographic-related bug ,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Bad),(Neutrality),(Very bad),(Very bad),
Yes,Development,4,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",Security implemented at the cryptographic level,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers",I usually use existing templates,cryptographic accumulator,(Bad),(Bad),,Yes (Go to Question 16),"Being able to run does not mean that there are no loopholes, such as missing a range proof",SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133 ),(Bad),(Neutrality),(Bad),(Bad),
Yes,Research,2.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02 ),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,None of them.,"Official documents, such as Solidity documents/white papers; Documents of template providers, such as OpenZepplin documents","It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,(Good),(Good),,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC- 121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/ SWC-133),(Good),(Good),(Good),(Good),
Yes,Research,0.8,China,SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",I don't understand the question (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Neutrality),(Bad),,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC- 121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Good),(Neutrality),(Bad),(Bad),
Yes,Research,3,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02 ),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",Design of many algorithms,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Official documents, such as Solidity documents/white papers┋template provider documents, such as OpenZepplin documents; Online tutorials/blogs",,,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133 ),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,2.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.┋Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers",I usually use existing templates,,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,0.5,China,None of them,"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc)",I don't understand the question (Go to Question 9),,"Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents / white papers┋online tutorials / blogs┋Q&A sites, such as Stack Overflow","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",,(Good),(Neutrality),,"They are basically the same, but lie in different aspects (Go to Question 16)",,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC -133),(Neutrality),(Neutrality),(Good),(Good),
Yes,Research,1.1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",I don't understand the question (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documents, such as Solidity documents/white papers; Documents of template providers, such as OpenZepplin documents",,,(Good),(Good),,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC- 121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/ SWC-133),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,0.5,China,None of them,"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",No (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.┋Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",Both rely on different domain knowledge rather than common computer fundamentals,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Good),(Neutrality),,No (Go to Question 17),,SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Good),(Good),(Neutrality),(Neutrality),
Yes,Research,3,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02 ),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),"The background knowledge does not meet, it is difficult to avoid security issues","Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Good),(Neutrality),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133 ),(Good),(Good),(Bad),(Bad),
Yes,Testing,0.8,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),Long learning time and difficult to understand,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",,(Neutrality),(Bad),,Yes (Go to Question 16),Long learning time and difficult to understand,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Neutrality),(Bad),(Bad),
Yes,Research,1,China,SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc)",Yes (Go to Question 8),Encryption complexity is too high,"Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Q&A sites, such as Stack Overflow; Technical books/papers",I usually use existing templates,,(Good),(Neutrality),,"They are basically the same, but lie in different aspects (Go to Question 16)",,None of them,(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,6,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02 ),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),Cryptography tasks require more relevant knowledge,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.┋Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Neutrality),(Neutrality),,Yes (Go to Question 16),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Good),(Bad),(Bad),
Yes,Research,1,China,None of them,"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",I don't understand the question (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.",I don't understand the question,I don't understand the question.,,,,,I don't understand the question (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120),,,,,
Yes,Research,2,China,KECCAK256 / SHA3 (https://www.evm.codes/#20),I don't understand the question,No (Go to Question 9),,None of them.,,,,(Very Good),(Good),,No (Go to Question 17),,None of them,(Good),(Good),(Good),(Good),
Yes,Research,0.8,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow","I usually use existing templates; It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Testing,3.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02 )┋ECADD (https://www.evm.codes/precompiled#0x06),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers","It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,,,,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Neutrality),(Bad),(Bad),
Yes,Research,4,China,None of them,"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),Additional cryptography knowledge required,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.","Official documents, such as Solidity documents/white papers; Documents of template providers, such as OpenZepplin documents; Online tutorials/blogs; Technical books/papers","I usually use existing templates; It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,,,,"They are basically the same, but lie in different aspects (Go to Question 16)",,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122),,,,,
Yes,Development,2.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),High basic requirements,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Official documentation, e.g. Solidity docs/whitepapers",I usually use existing templates,,(Good),(Good),,Yes (Go to Question 16),High basic requirements,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120),(Good),(Good),(Good),(Good),
Yes,Research,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),1,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.┋Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents┋Q&A websites, such as Stack Overflow",I don't understand the question.,,(Good),(Good),,"They are basically the same, but lie in different aspects (Go to Question 16)",1,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117),(Very Good),(Good),(Good),(Good),
Yes,Research,2.5,China,SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)","They are basically the same, but lie in different aspects (Go to Question 8)",Theoretical questions,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Documents of template providers, such as OpenZepplin documents; Online tutorials/blogs; Technical books/papers","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates",,(Neutrality),(Neutrality),,"They are basically the same, but lie in different aspects (Go to Question 16)",theoretical difficulties,SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133 ),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,2.8,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers",I usually use existing templates,no,(Good),(Good),no,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC -133),(Good),(Good),(Good),(Good),no
Yes,Research,0.5,China,None of them,"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc)",Yes (Go to Question 8),understand the principle,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents / white papers┋online tutorials / blogs","It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,(Good),(Good),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Good),(Good),(Good),(Neutrality),
Yes,Development,1.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01);SHA256 (https://www.evm.codes/precompiled#0x02 )┋ModExp (https://www.evm.codes/precompiled#0x05),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),"The requirements for mathematics are higher, and the industry is relatively early, and safety practices are in the exploratory stage, and there will be certain concerns about safety",,"Official documents, such as Solidity documents/white papers; Documents of template providers, such as OpenZepplin documents; Online tutorials/blogs; Technical books/papers",I usually use existing templates,,(Bad),(Neutrality),,Yes (Go to Question 16),"The requirements for mathematics and professionalism are very high, while the security of other parts of the contract may be more biased towards business logic, focusing more on logic rather than mathematical design",SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Neutrality),(Good),(Neutrality),"The functions of development tools such as LSP/editor plugin are still weak, and the deployment/management tools of contract projects are not yet mature"
Yes,Research,2.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",I don't understand the question (Go to Question 9),,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.┋Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.┋Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.","Official documents, such as Solidity documents/white papers; Documents of template providers, such as OpenZepplin documents","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates; It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,(Neutrality),(Neutrality),,"They are basically the same, but lie in different aspects (Go to Question 16)",,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Neutrality),(Neutrality),(Neutrality),
Yes,Research,1.7,China,KECCAK256 / SHA3 (https://www.evm.codes/#20)┋ecRecover (https://www.evm.codes/precompiled#0x01)┋ModExp (https://www.evm.codes/precompiled#0x05) )┋ECADD (https://www.evm.codes/precompiled#0x06)┋ECMUL (https://www.evm.codes/precompiled#0x07),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers","It depends on the complexity of the cryptographic task. For complex tasks, I use existing templates; It depends on the complexity of the cryptographic task. For simple tasks, I choose to use existing templates",,(Neutrality),(Neutrality),,No (Go to Question 17),,SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122 );SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Neutrality),(Good),(Good),
Yes,Research,2.2,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,,"Official documents, such as Solidity documents/white papers┋template provider documents, such as OpenZepplin documents; Online tutorials/blogs",I usually use existing templates,,(Good),(Good),,No (Go to Question 17),,I don't understand the question.,(Neutrality),(Good),(Neutrality),(Good),
Yes,Research,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),math problems,"Knowledge obstacles. For example, I don't understand the basic concepts and principles in cryptography/blockchain fileds.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Good),(Good),,Yes (Go to Question 16),Evidence in mathematics is required,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Bad),(Neutrality),(Neutrality),(Good),
Yes,Research,5.5,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",Yes (Go to Question 8),"The algorithms involved in cryptography programming tasks are complex. Although there are some third-party libraries that can be relied upon, many functions need to be added to these libraries to realize the tasks.","Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Neutrality),(Neutrality),,Yes (Go to Question 16),Cryptography to achieve security confirmation needs to rely on rich mathematical knowledge for reasoning,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-120: Weak Sources of Randomness from Chain Attributes (https://swcregistry.io/docs/SWC-120);SWC-121: Missing Protection against Signature Replay Attacks (https://swcregistry.io/docs/SWC-121);SWC-122: Lack of Proper Signature Verification (https://swcregistry.io/docs/SWC-122);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Neutrality),(Bad),(Bad),
Yes,Research,0.6,China,KECCAK256 / SHA3 (https://www.evm.codes/#20),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",I don't understand the question (Go to Question 9),,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Good),(Neutrality),,I don't understand the question (Go to Question 17),,None of them,(Good),(Neutrality),(Bad),(Bad),
Yes,Research,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)",Yes (Go to Question 8),Cryptography involves more mathematical proofs,"Roadmap identification obstacles. For example, I struggle with identifying the appropriate template/crypto API to use.; Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow; Technical books/papers",I usually use existing templates,,(Good),(Neutrality),,I don't understand the question (Go to Question 17),,None of them,(Very Good),(Good),(Good),(Very Good),
Yes,Research,1,China,KECCAK256 / SHA3 (https://www.evm.codes/#20);SHA256 (https://www.evm.codes/precompiled#0x02),"Hash (including KECCAK256/SHA3, SHA2-256, RIPEMD-160, etc);Signature (including ECDSA, etc.)┋Zero-knowledge Proof (including Plonk, etc.)",No (Go to Question 9),,"Template usage obstacles. For example, I encounter issues when trying to reuse the OpenZepplin's Library.┋Ethereum crypto API usage obstacles. For example, I encounter issues when trying to directly call the Ethereum precompiled contracts such as ecRecover.;Security obstacle. For example, I am uncertain whether my implementation is secure.","Official documents, such as Solidity documents/white papers; Template provider documents, such as OpenZepplin documents; Online tutorials/blogs┋Q&A websites, such as Stack Overflow",I usually use existing templates,,(Good),(Good),,No (Go to Question 17),,SWC-117: Signature Malleability (https://swcregistry.io/docs/SWC-117);SWC-133: Hash Collisions With Multiple Variable Length Arguments (https://swcregistry.io/docs/SWC-133),(Neutrality),(Bad),(Bad),(Good),
